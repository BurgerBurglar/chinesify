import type { NextPage } from "next";
import Head from "next/head";
import { ChangeEvent, useState } from "react";
import CharSelect from "../components/CharSelect";
import { getMingOptions, getXingOptions } from "../fetch";
import { useClipboard } from "../hooks/useClipBoard";
import { CharDetails, Gender } from "../types";

const Home: NextPage = () => {
  const [givenName, setGivenName] = useState("");
  const [familyName, setFamilyName] = useState("");
  const [gender, setGender] = useState<Gender>("m");
  const [mingOptions, setMingOptions] = useState<
    [CharDetails[], CharDetails[]]
  >([[], []]);
  const [xingOptions, setXingOptions] = useState<CharDetails[]>([]);

  const [selectedIndices, setSelectedIndices] = useState([0, 0, 0]);

  const setSelectedIndex = (selectIndex: number, charIndex: number) => {
    setSelectedIndices((prev) => {
      const duplication = [...prev];
      duplication[charIndex] = selectIndex;
      return duplication;
    });
  };

  const fullname = [
    xingOptions[selectedIndices[0]]?.char,
    mingOptions[0][selectedIndices[1]]?.char,
    mingOptions[1][selectedIndices[2]]?.char,
  ].join("");

  const { hasCopied, onCopy } = useClipboard(fullname);

  const handleGenderChange = (e: ChangeEvent<HTMLInputElement>) => {
    setGender(e.target.value as Gender);
  };

  const handleClick = async () => {
    const newMingOptions = await getMingOptions(givenName, { gender });
    setMingOptions(newMingOptions);

    const newXingOptions = await getXingOptions(familyName);
    setXingOptions(newXingOptions);

    setSelectedIndices([0, 0, 0]);
  };

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="flex flex-col gap-2 items-center max-w-lg mx-auto">
        <div className="flex flex-col justify-between w-full">
          <label htmlFor="given-name">Given Name</label>
          <input
            id="given-name"
            className="text-3xl outline outline-1 outline-gray-200 text-red-800"
            type="text"
            value={givenName}
            onChange={(e) => setGivenName(e.target.value)}
          />
        </div>
        <div className="flex flex-col justify-between w-full">
          <label htmlFor="family-name">Family Name</label>
          <input
            id="family-name"
            className="text-3xl outline outline-1 outline-gray-200 text-green-800"
            type="text"
            value={familyName}
            onChange={(e) => setFamilyName(e.target.value)}
          />
        </div>
        <fieldset id="gender" className="flex gap-2 items-center">
          <input
            type="radio"
            id="Male"
            name="gender"
            value="m"
            onChange={handleGenderChange}
          />
          <label htmlFor="Male">Male</label>
          <input
            type="radio"
            id="Female"
            name="gender"
            value="f"
            onChange={handleGenderChange}
          />
          <label htmlFor="Female">Female</label>
        </fieldset>
        <button
          className="rounded-md bg-blue-600 hover:bg-blue-700 active:bg-blue-800 text-white text-xl w-fit px-2 py-1"
          onClick={handleClick}
        >
          generate
        </button>
        <div className="flex gap-2">
          <CharSelect
            chars={xingOptions}
            isXing
            selectIndex={selectedIndices[0]}
            setSelectIndex={(selectIndex) => setSelectedIndex(selectIndex, 0)}
          />
          <CharSelect
            chars={mingOptions[0]}
            selectIndex={selectedIndices[1]}
            setSelectIndex={(selectIndex) => setSelectedIndex(selectIndex, 1)}
          />
          <CharSelect
            chars={mingOptions[1]}
            selectIndex={selectedIndices[2]}
            setSelectIndex={(selectIndex) => setSelectedIndex(selectIndex, 2)}
          />
        </div>
        <button
          className="rounded-md bg-blue-600 hover:bg-blue-700 active:bg-blue-800 text-white text-xl w-fit px-2 py-1"
          onClick={onCopy}
        >
          {hasCopied ? "Copied" : "Copy"}
        </button>
      </div>
    </>
  );
};

export default Home;
